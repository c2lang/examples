module container;

import stdlib local;
import string local;

public type StringBuffer struct {
    uint32 capacity_;
    uint32 size_;
    char[0] data_;
} @(opaque)

public func StringBuffer* stringBuffer_create(uint32 capacity_)
{
    StringBuffer* buf = malloc(sizeof(StringBuffer) + capacity_);
    buf.capacity_ = capacity_;
    buf.size_ = 0;
    return buf;
}

public func void stringBuffer_destroy(StringBuffer* buf)
{
    free(buf);
}

public func uint32 stringBuffer_size(const StringBuffer* buf)
{
    return buf.size_;
}

public func const char* stringBuffer_data(const StringBuffer* buf)
{
    return buf.data_;
}

public func void stringBuffer_clear(StringBuffer* buf)
{
    buf.size_ = 0;
}

public func void stringBuffer_add(StringBuffer* buf, const char* text)
{
    uint32 len = cast<uint32>(strlen(text));
    if (len >= (buf.capacity_ - buf.size_)) return;
    strcpy(&buf.data_[buf.size_], text);
    buf.size_ += len;
}

