module json;

import stdlib local;
import stdio local;
import libc_fcntl local;
import string local;
import c_errno local;
import unistd local;
import file_utils;

fn u32 roundup(u32 size) {
    if ((size & 0x3) == 0) return size;
    return (size + 3) & ~0x3;
}

type Header struct @(packed) {
    u32 names_size;
    u32 values_size;
    u32 nodes_size;
    u8[0] data;
}

fn bool Data.write(const Data* d,  i32 fd) {
    // NOTE: copy to internal buffer first, do single write()
    u32 size = sizeof(Header);
    size += roundup(d.names.cur);
    size += roundup(d.values.cur);
    size += roundup(d.nodes.getSize());
    u8* buf = malloc(size);

    Header* hdr = cast<Header*>(buf);
    hdr.names_size = d.names.cur;
    hdr.values_size = d.values.cur;
    hdr.nodes_size = d.nodes.getSize();
    u32 offset = 0;
    memcpy(&hdr.data[offset], d.names.data, d.names.cur);
    offset += roundup(d.names.cur);
    memcpy(&hdr.data[offset], d.values.data, d.values.cur);
    offset += roundup(d.values.cur);
    memcpy(&hdr.data[offset], cast<u8*>(d.nodes.data), d.nodes.getSize());

    i64 written = write(fd, buf, size);
    free(buf);
    if (written != size) return false;
    return true;
}

fn Data* Data.read(const u8* data, u32 size) {
    if (size < sizeof(Header)) return nil;
    const Header* hdr = cast<Header*>(data);
    u32 exp_size = sizeof(Header);
    exp_size += roundup(hdr.names_size);
    exp_size += roundup(hdr.values_size);
    exp_size += roundup(hdr.nodes_size);
    if (size != exp_size) return nil;

    Data* d = malloc(sizeof(Data));
    u32 offset = 0;

    d.names.init(hdr.names_size);
    memcpy(d.names.data, &hdr.data[offset], hdr.names_size);
    d.names.cur = hdr.names_size;
    offset += roundup(hdr.names_size);

    d.values.init(hdr.values_size);
    memcpy(d.values.data, &hdr.data[offset], hdr.values_size);
    d.values.cur = hdr.values_size;
    offset += roundup(hdr.values_size);

    d.nodes.init(hdr.nodes_size / sizeof(Node));
    memcpy(d.nodes.data, &hdr.data[offset], hdr.nodes_size);
    d.nodes.cur = hdr.nodes_size / sizeof(Node);

    return d;
}

public fn bool Parser.write_cache(Parser* p, const char* filename) {
    if (!p.data) return true;
    i32 fd = open(filename, O_CREAT | O_WRONLY | O_TRUNC, 0660);
    if (fd == -1) {
        sprintf(p.message, "cannot open file: %s", strerror(*errno2()));
        return false;
    }
    if (!p.data.write(fd)) {
        sprintf(p.message, "cannot write file: %s", strerror(*errno2()));
        close(fd);
        return false;
    }
	close(fd);
    return true;
}

public fn bool Parser.read_cache(Parser* p, const char* filename) {
    if (p.data) p.data.destroy();
    p.message[0] = 0;

    file_utils.Reader file;
    if (!file.open(filename)) {
        sprintf(p.message, "cannot read file: %s", strerror(*errno2()));
        return false;
    }
    if (file.isEmpty()) {
        strcpy(p.message, "invalid data");
        return false;
    }
    p.data = Data.read(file.data(), file.size);
    file.close();
    if (!p.data) {
        strcpy(p.message, "invalid data");
        return false;
    }
    return true;
}

