module test;

import stdio local;
import string local;
import stdlib;
import sys_time;

import file_utils;
import json;

const char[] Cache_suffix = ".cache";

func u64 current_time() {
    sys_time.Timeval tv;
    sys_time.gettimeofday(&tv, nil);
    u64 now64 = cast<u64>(tv.tv_sec);
    now64 *= 1000000;
    now64 += tv.tv_usec;
    return now64;
}

func bool isCache(const char* filename) {
    u64 len = strlen(filename);
    u64 suflen = strlen(Cache_suffix);
    if (len <= suflen + 1) return false;
    if (strcmp(&filename[len - suflen], Cache_suffix) == 0) return true;
    return false;
}

public func i32 main(i32 argc, char*[] argv) {
    if (argc < 2) {
        printf("Usage: parser [json-file]\n");
        return 0;
    }
    const char* filename = argv[1];

    bool use_cache = false;
    json.Parser parser;
    parser.init();

    if (!use_cache || !isCache(filename)) {
        u64 t1 = current_time();
        file_utils.Reader file;
        file.open(filename);

        //printf("%s", file.data());
        if (file.isEmpty()) {
            printf("file %s is empty\n", filename);
            return 0;
        }

        if (!parser.parse(cast<const char*>(file.data()))) {
            fprintf(stderr, "error parsing %s: %s\n", filename, parser.getDiag());
            return -1;
        }
        u64 t2 = current_time();
        printf("parsing took %lu usec\n", t2 - t1);
        file.close();
    } else {
        u64 t1 = current_time();
        if (!parser.read_cache(filename)) {
            fprintf(stderr, "error reading cache %s: %s\n", filename, parser.getDiag());
            return -1;
        }
        u64 t2 = current_time();
        printf("reading cache took %lu usec\n", t2 - t1);
    }
    parser.report();

    if (argc >= 3) parser.dump(argc > 3);

    if (strcmp(filename, "json_parser/example1.json") == 0) {
        const char* search = "platform.checksum";
        const char* value = parser.find_text(search);
        if (value) {
            printf("%s = [%s]\n", search, value);
        } else {
            printf("cannot find %s\n", search);
        }
    }

    if (strcmp(filename, "json_parser/example3.json") == 0) {
        // generated by http://jsongen.pykaso.net
        printf("Items:\n");
        json.Iter iter = parser.getArrayIter("items");
        if (iter.done()) printf("  No items found\n");
        while (!iter.done()) {
            printf("  item:\n");
            json.Iter iter2 = iter.getObjectIter();
            while (!iter2.done()) {
                const char* k = iter2.getKey();
                const char* v = iter2.getValue();
                printf("    %s -> %s\n", k, v);
                iter2.next();
            }
            iter.next();
        }
    }

    if (strcmp(filename, "json_parser/example4.json") == 0) {
        printf("top level:\n");
        json.Iter iter = parser.getObjectIter(nil);
        while (!iter.done()) {
            const char* k = iter.getKey();
            const char* v = iter.getValue();
            printf("  %s: %s\n", k, v);
            iter.next();
        }
    }

    if (strcmp(filename, "json_parser/example5.json") == 0) {
        json.Iter iter = parser.getArrayIter(nil);
        if (iter.check_schema("ssso(ss)")) {
            i32 id = stdlib.atoi(iter.getValue());
            iter.next();
            const char* uid = iter.getValue();
            iter.next();
            const char* action = iter.getValue();
            iter.next();
            const char* vendor = iter.find_text("chargePointVendor");
            const char* model = iter.find_text("chargePointModel");
            printf("%u  uid %s  action %s (vendor %s, model %s)\n", id, uid, action, vendor, model);
        } else {
            printf("incorrect schema\n");
        }
    }

    if (use_cache && !isCache(filename)) {
        u64 t3 = current_time();
        char[128] cache_file;
        sprintf(cache_file, "%s%s", filename, Cache_suffix);
        parser.write_cache(cache_file);
        u64 t4 = current_time();
        printf("writing %s took %lu usec\n", cache_file, t4 - t3);
    }

    parser.destroy();

#if 0
    json.Builder builder;
    builder.init(1024);
    builder.addArray(nil);
    builder.addNumber(nil, 2);
    builder.addValue(nil, "19223201");
    builder.addValue(nil, "BootNotification");
    builder.addObject(nil);
    builder.addValue("chargePointVendor", "VendorX");
    builder.addValue("chargePointModel", "SingleSocketCharger");
    builder.closeObject();
    builder.closeArray();
    //builder.finalize();
    printf("---\n%s\n---\n", builder.getData());
    builder.free();
#endif

    return 0;
}

