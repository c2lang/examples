module json;

import stdio local;
import string local;
import csetjmp local;

public const u32 MAX_DIAG = 256;

public type Parser struct {
    Data* data;
    char[MAX_DIAG] message;
}

public func void Parser.init(Parser* p) {
    p.data = Data.create();
    p.message[0] = 0;
}

public func void Parser.destroy(Parser* p) {
    p.data.destroy();
    p.data = nil;
}

public func bool Parser.parse(Parser* p, const char* text) {
    p.data.reset();
    p.message[0] = 0;
    JParser parser;
    return parser.parse(text, p.message, p.data);
}

public func void Parser.report(const Parser* p) {
    printf("JSON: %u nodes, names: %u bytes, values: %u bytes\n", p.data.nodes.cur, p.data.names.cur, p.data.values.cur);
}

public func void Parser.dump(const Parser* p, bool verbose) {
    p.data.dump(verbose);
}

public func const char* Parser.getDiag(Parser* p) {
    return p.message;
}


type JParser struct {
    Tokenizer tokenizer;
    Token token;
    Location prev;
    Data* data;

    bool inArray;
    u32[16] name_cache;

    JmpBuf jmp_err;
    char* msg;
}

func bool JParser.parse(JParser* p, const char* text, char* diagMsg, Data* data) {
    p.tokenizer.init(text);
    p.token.init();
    p.prev.set(0, 0);
    p.msg = diagMsg;
    p.data = data;
    p.inArray = false;
    memset(p.name_cache, 0, sizeof(p.name_cache));


    i32 res = setjmp(p.jmp_err);
    if (res == 0) {
        p.consumeToken();
        p.parseFile();
        return true;
    } // else got error, msg should be set
    return false;
}

func Location JParser.consumeToken(JParser* p) {
    p.prev = p.token.getLoc();
    p.tokenizer.lex(&p.token);
#if 0
    printf("  %8s %s", p.token.getName(), p.diagLoc());
    if (p.token.is(TokenKind.Text)) printf("  %s", p.token.getText());
    printf("\n");
#endif
    if (p.token.is(TokenKind.Error)) {
        strcpy(p.msg, p.token.getText());
        longjmp(p.jmp_err, 1);
    }
    return p.prev;
}

func void JParser.parseFile(JParser* p) {
    switch (p.token.getKind()) {
    case TokenKind.L_brace:
        u32 node_idx = p.data.addNode(NodeKind.Object, 0, 0);
        p.parseObject(node_idx);
        break;
    case TokenKind.L_sbracket:
        u32 node_idx = p.data.addNode(NodeKind.Array, 0, 0);
        p.parseArray(node_idx);
        break;
    default:
        sprintf(p.msg, "unexpected '%s' %s", getTokenName(p.token.getKind()), p.diagLoc());
        longjmp(p.jmp_err, 1);
        break;
    }
    p.expect(TokenKind.Eof);
}

func const char* JParser.diagLoc(const JParser* p) {
    Location loc = p.token.getLoc();
    return loc.str();
}

func void JParser.expect(JParser* p, TokenKind k) {
    if (p.token.isNot(k)) {
        sprintf(p.msg, "expected '%s' %s", getTokenName(k), p.diagLoc());
        longjmp(p.jmp_err, 1);
    }
}

func void JParser.expectAndConsume(JParser* p, TokenKind k) {
    p.expect(k);
    p.consumeToken();
}

func void JParser.parseArray(JParser* p, u32 parent_idx) {
    p.expectAndConsume(TokenKind.L_sbracket);

    // TODO check names already present in array
    // TODO inArray multi-level, currently single level
/*
    For each entry in array, reset table index to new
*/
    u32 prev_idx = 0;
    p.inArray = true;
    while (1) {
        u32 node_idx = 0;
        switch (p.token.getKind()) {
        case TokenKind.Kw_true:  fallthrough;
        case TokenKind.Kw_false: fallthrough;
        case TokenKind.Kw_null:  fallthrough;
        case TokenKind.Text:
            u32 value_idx = p.parseValue();
            node_idx = p.data.addNode(NodeKind.Value, 0, value_idx);
            break;
        case TokenKind.L_brace:
            node_idx = p.data.addNode(NodeKind.Object, 0, 0);
            p.parseObject(node_idx);
            break;
        case TokenKind.L_sbracket:
            node_idx = p.data.addNode(NodeKind.Array, 0, 0);
            p.parseArray(node_idx);
            break;
        case TokenKind.R_sbracket:
            break;
        case TokenKind.R_brace: fallthrough;
        case TokenKind.Colon:   fallthrough;
        case TokenKind.Comma:   fallthrough;
        case TokenKind.Eof:     fallthrough;
        case TokenKind.Error:
            sprintf(p.msg, "expected '{', '[' or text %s", p.diagLoc());
            longjmp(p.jmp_err, 1);
            break;
        }
        if (prev_idx) {
            p.data.setNext(prev_idx, node_idx);
        } else {
            if (parent_idx) {
                p.data.setChild(parent_idx, node_idx);  // only register first node as child
            }
        }
        prev_idx = node_idx;
        if (p.token.isNot(TokenKind.Comma)) break;
        Location commaLoc = p.consumeToken();
        if (p.token.is(TokenKind.R_sbracket)) {
            sprintf(p.msg, "superfluous comma %s", commaLoc.str());
            longjmp(p.jmp_err, 1);
        }
    }
    p.expectAndConsume(TokenKind.R_sbracket);
    p.inArray = false;
}

func u32 JParser.addName(JParser* p, u32 entry_idx, const char* name) {
    if (!p.inArray || entry_idx >= elemsof(p.name_cache)) {
        return p.data.addName(name, cast<u32>(strlen(name)));
    }
    u32 name_idx = 0;
    u32 cache_idx = p.name_cache[entry_idx];
    if (cache_idx != 0) {
        const char* cached = &p.data.names.data[cache_idx];
        if (strcmp(cached, name) == 0) return cache_idx;
    }
    name_idx = p.data.addName(name, cast<u32>(strlen(name)));
    p.name_cache[entry_idx] = name_idx;
    return name_idx;
}

func void JParser.parseObject(JParser* p, u32 parent_idx) {
    p.expectAndConsume(TokenKind.L_brace);
    u32 prev_idx = 0;
    u32 entry_idx = 0;
    while (1) {
        if (p.token.getKind() == TokenKind.R_brace) break;

        p.expect(TokenKind.Text);
        char [MAX_TEXT] name;
        strcpy(name, p.token.getText());
        p.consumeToken();

        u32 name_idx = p.addName(entry_idx, name);

        p.expectAndConsume(TokenKind.Colon);
        u32 node_idx = 0;
        switch (p.token.getKind()) {
        case TokenKind.Kw_true:  fallthrough;
        case TokenKind.Kw_false: fallthrough;
        case TokenKind.Kw_null:  fallthrough;
        case TokenKind.Text:
            u32 value_idx = p.parseValue();
            node_idx = p.data.addNode(NodeKind.Value, name_idx, value_idx);
            break;
        case TokenKind.L_brace:
            node_idx = p.data.addNode(NodeKind.Object, name_idx, 0);
            p.parseObject(node_idx);
            break;
        case TokenKind.L_sbracket:
            node_idx = p.data.addNode(NodeKind.Array, name_idx, 0);
            p.parseArray(node_idx);
            break;
        case TokenKind.R_brace:    fallthrough;
        case TokenKind.R_sbracket: fallthrough;
        case TokenKind.Colon:      fallthrough;
        case TokenKind.Comma:      fallthrough;
        case TokenKind.Eof:        fallthrough;
        case TokenKind.Error:
            sprintf(p.msg, "expected '{', '[' or text %s", p.diagLoc());
            longjmp(p.jmp_err, 1);
            break;
        }
        if (prev_idx) {
            p.data.setNext(prev_idx, node_idx);
        } else {
            if (parent_idx) {
                p.data.setChild(parent_idx, node_idx);  // only register first node as child
            }
        }
        prev_idx = node_idx;

        if (p.token.isNot(TokenKind.Comma)) break;
        Location commaLoc = p.consumeToken();
        if (p.token.is(TokenKind.R_brace)) {
            sprintf(p.msg, "superfluous comma %s", commaLoc.str());
            longjmp(p.jmp_err, 1);
        }
        entry_idx++;
    }
    p.expectAndConsume(TokenKind.R_brace);
}

func u32 JParser.parseValue(JParser* p) {
    char[MAX_TEXT] value;
    switch (p.token.getKind()) {
    case TokenKind.Kw_true:
        value[0] = '1';
        value[1] = 0;
        break;
    case TokenKind.Kw_false:
        value[0] = '0';
        value[1] = 0;
        break;
    case TokenKind.Kw_null:
        value[0] = 0;
        break;
    case TokenKind.Text:
        strcpy(value, p.token.getText());
        break;
    default:
        sprintf(p.msg, "syntax error %s", p.diagLoc());
        longjmp(p.jmp_err, 1);
        break;
    }
    p.consumeToken();
    return p.data.addValue(value, cast<u32>(strlen(value)));
}


const u32 MAX_TEXT = 256;

type Tokenizer struct {
    const char* dataStart;
    const char* current;
    Location loc;
    char[MAX_TEXT] msg;
}

func void Tokenizer.init(Tokenizer* t, const char* text) {
    t.dataStart = text;
    t.current = text;
    t.loc.set(1, 1);
}

func void Tokenizer.lex(Tokenizer* t, Token* result) {
    result.clear();
    while (1) {
        switch (t.current[0]) {
        case 0:
            result.setLocation(t.loc);
            result.setKind(TokenKind.Eof);
            return;
        case ' ': fallthrough;
        case '\t':
            t.advance(1);
            break;
        case '\r':
            t.current++;
            if (t.current[0] != '\n') {
                sprintf(t.msg, "unexpected char '%c' %s", t.current[0], t.loc.str());
                result.setKind(TokenKind.Error);
                result.setData(t.msg);
                return;
            }
            fallthrough;
        case '\n':
            t.current++;
            t.loc.line++;
            t.loc.col = 1;
            break;
        case '[':
            result.setLocation(t.loc);
            result.setKind(TokenKind.L_sbracket);
            t.advance(1);
            return;
        case ']':
            result.setLocation(t.loc);
            result.setKind(TokenKind.R_sbracket);
            t.advance(1);
            return;
        case '{':
            result.setLocation(t.loc);
            result.setKind(TokenKind.L_brace);
            t.advance(1);
            return;
        case '}':
            result.setLocation(t.loc);
            result.setKind(TokenKind.R_brace);
            t.advance(1);
            return;
        case ':':
            result.setLocation(t.loc);
            result.setKind(TokenKind.Colon);
            t.advance(1);
            return;
        case ',':
            result.setLocation(t.loc);
            result.setKind(TokenKind.Comma);
            t.advance(1);
            return;
        case '"':
            t.parseText(result);
            return;
        case '-': fallthrough;
        case '0': fallthrough;
        case '1': fallthrough;
        case '2': fallthrough;
        case '3': fallthrough;
        case '4': fallthrough;
        case '5': fallthrough;
        case '6': fallthrough;
        case '7': fallthrough;
        case '8': fallthrough;
        case '9':
            t.parseNumber(result);
            return;
        case 'f': fallthrough;
        case 'n': fallthrough;
        case 't':
            t.parseKeyword(result);
            return;
        default:
            sprintf(t.msg, "unexpected char '%c' %s", t.current[0], t.loc.str());
            result.setKind(TokenKind.Error);
            result.setData(t.msg);
            return;
        }
    }
}

func void Tokenizer.parseText(Tokenizer* t, Token* result) {
    t.current++;
    const char* start = t.current;
    while (t.current[0] && t.current[0] != '"') t.current++;
    u32 len = cast<u32>(t.current - start);
    if (len >= MAX_TEXT) {
        sprintf(t.msg, "text too long %u (max %u) %s", len, MAX_TEXT-1, t.loc.str());
        result.setKind(TokenKind.Error);
        result.setData(t.msg);
        return;
    }
    memcpy(t.msg, start, len);
    t.msg[len] = 0;
    result.setKind(TokenKind.Text);
    result.setData(t.msg);
    result.setLocation(t.loc);
    if (t.current[0] == '"') {
        t.current++;
        len++;
    }
    // NOTE: dont use advance() since current is already moved
    t.loc.col += len+1;
}

func void Tokenizer.parseNumber(Tokenizer* t, Token* result) {
    const char* start = t.current;
    if (t.current[0] == '-') t.current++;
    while (t.current[0] >= '0' && t.current[0] <= '9') t.current++;
    if (t.current[0] == '.') {
        t.current++;
        while (t.current[0] >= '0' && t.current[0] <= '9') t.current++;
    }
    u32 len = cast<u32>(t.current - start);
    memcpy(t.msg, start, len);
    t.msg[len] = 0;
    result.setKind(TokenKind.Text);
    result.setData(t.msg);
    result.setLocation(t.loc);
    t.loc.col += len;
}

func void Tokenizer.parseKeyword(Tokenizer* t, Token* result) {
    // TODO should check on next char as well (not letter/number/undercore/etc)
    if (strncmp(t.current, "true", 4) == 0) {
        result.setLocation(t.loc);
        result.setKind(TokenKind.Kw_true);
        t.advance(4);
    } else if (strncmp(t.current, "false", 5) == 0) {
        result.setLocation(t.loc);
        result.setKind(TokenKind.Kw_false);
        t.advance(5);
    } else if (strncmp(t.current, "null", 4) == 0) {
        result.setLocation(t.loc);
        result.setKind(TokenKind.Kw_false);
        t.advance(4);
    } else {
        sprintf(t.msg, "unexpected char '%c' %s", t.current[0], t.loc.str());
        result.setKind(TokenKind.Error);
        result.setData(t.msg);
    }
}

func void Tokenizer.advance(Tokenizer* t, u32 amount) {
    t.loc.col += amount;
    t.current += amount;
}


type TokenKind enum u8 {
    Kw_true,
    Kw_false,
    Kw_null,
    L_brace,
    R_brace,
    L_sbracket,
    R_sbracket,
    Colon,
    Comma,
    Text,
    Eof,
    Error,
}

func const char* getTokenName(TokenKind k) {
    switch (k) {
    case TokenKind.Kw_true:    return "true";
    case TokenKind.Kw_false:   return "false";
    case TokenKind.Kw_null:    return "null";
    case TokenKind.L_brace:    return "{";
    case TokenKind.R_brace:    return "}";
    case TokenKind.L_sbracket: return "[";
    case TokenKind.R_sbracket: return "]";
    case TokenKind.Colon:      return ":";
    case TokenKind.Comma:      return ",";
    case TokenKind.Text:       return "text";
    case TokenKind.Eof:        return "eof";
    case TokenKind.Error:      return "error";
    }
    return "?";
}

type Token struct {
    Location loc;
    TokenKind kind;
    const char* text;
}

func void Token.init(Token* t) {
    t.loc.set(0, 0);
    t.kind = TokenKind.Eof;
    t.text = nil;
}

func Location Token.getLoc(const Token* t) {
    return t.loc;
}

func void Token.clear(Token* t) {
    t.text = nil;
}

func void Token.setData(Token* t, const char* d) {
    t.text = d;
}

func const char* Token.getName(const Token* t) {
    return getTokenName(t.kind);
}

func TokenKind Token.getKind(const Token* t) {
    return t.kind;
}

func bool Token.is(const Token* t, TokenKind kind) {
    return t.kind == kind;
}

func bool Token.isNot(const Token* t, TokenKind kind) {
    return t.kind != kind;
}

func const char* Token.getText(const Token* t) {
    return t.text;
}

func void Token.setKind(Token* t, TokenKind kind) {
    t.kind = kind;
}

func void Token.setLocation(Token* t, Location loc) {
    t.loc = loc;
}


type Location struct {
    u32 line;
    u32 col;
}

func void Location.set(Location* loc, u32 l, u32 c) {
    loc.line = l;
    loc.col = c;
}

func const char* Location.str(const Location* loc) {
    local char[32] msg;
    sprintf(msg, "at line %d:%d", loc.line, loc.col);
    return msg;
}

