module test;
import csignal local;
import string local;
import stdlib local;
import stdio local;
import unistd local;

func void fatal(const char* msg) {
	exit(EXIT_FAILURE);
}

func void signal_handler(i32 num) {
	printf("got signal %d\n", num);
	exit(EXIT_SUCCESS);
}

public func i32 main() {
    Sigaction act;
    memset(&act, 0, sizeof(act));
    act.sa_flags = SA_NOCLDSTOP|SA_RESTART;
    //act.sa_handler = SIG_IGN;
    //if (sigaction(SIGPIPE, &act, nil) != 0) fatal("sigaction(SIGPIPE)");
    //if (sigaction(SIGHUP, &act, nil) != 0) fatal("sigaction(SIGHUP)");
    //if (sigaction(SIGQUIT, &act, nil) != 0) fatal("sigaction(SIGQUIT)");
    //if (sigaction(SIGALRM, &act, nil) != 0) fatal("sigaction(SIGALRM)");

	act.sa_handler = signal_handler;
    if (sigaction(SIGINT, &act, nil) != 0) fatal("sigaction(SIGINT)");
    if (sigaction(SIGTERM, &act, nil) != 0) fatal("sigaction(SIGTERM)");

    printf("press Ctrl-C to stop\n");
	while (1) {
		sleep(1);
	}

    return 0;
}


