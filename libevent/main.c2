module event_test;

import csignal local;
import string local;
import stdlib local;
import stdio local;
import unistd local;
import example_socket local;
import events;
import logger;

events.Base* base;
logger.Log* mainlog;

func void timeout_func(void*) {
    mainlog.warn("timeout");
}

public func i32 main() {
    logger.Base logbase;
    logbase.init(logger.INFO, unistd.isatty(1), true);

    logger.Log log;
    log.init(&logbase, "main");
    mainlog = &log;

    log.info("starting");

    base = events.Base.create();

    Sigaction act;
    memset(&act, 0, sizeof(act));
    act.sa_flags = SA_NOCLDSTOP|SA_RESTART;
	act.sa_handler = signal_handler;
    if (sigaction(SIGINT, &act, nil) != 0) fatal("sigaction(SIGINT)");
    if (sigaction(SIGTERM, &act, nil) != 0) fatal("sigaction(SIGTERM)");

    events.Timer timer;
    timer.assign(base, events.PERSIST, timeout_func, nil);
    //timer.add(250000);

    Socket* socket1 = Socket.create(base, &logbase, "server1", 7777);
    Socket* socket2 = Socket.create(base, &logbase, "server2", 8888);

    log.info("before mainloop");
    u8 ret = base.mainloop();
    log.info("after mainloop");

    socket2.destroy();
    socket1.destroy();
    base.destroy();
    logbase.destroy();

    return ret;
}

func void fatal(const u8* msg) {
	exit(EXIT_FAILURE);
}

func void signal_handler(i32 num) {
    base.loopbreak(EXIT_SUCCESS);
}

