module event_test;

import event local;
import csignal local;
import string local;
import stdlib local;
import stdio local;
import unistd local;

Base* base;

func void timeout_func(void*) {
    printf("timeout\n");
}

public func i32 main() {
    base = Base.create();

    Sigaction act;
    memset(&act, 0, sizeof(act));
    act.sa_flags = SA_NOCLDSTOP|SA_RESTART;
	act.sa_handler = signal_handler;
    if (sigaction(SIGINT, &act, nil) != 0) fatal("sigaction(SIGINT)");
    if (sigaction(SIGTERM, &act, nil) != 0) fatal("sigaction(SIGTERM)");

    Timer timer;
    timer.assign(base, TIMER_PERSIST, timeout_func, nil);
    timer.add(250000);

    u8 ret = base.mainloop();

    base.free();
    return ret;
}

func void fatal(const u8* msg) {
	exit(EXIT_FAILURE);
}

func void signal_handler(i32 num) {
    base.loopbreak(EXIT_SUCCESS);
}

