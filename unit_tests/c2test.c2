module c2test;

import stdio local;
import csetjmp local;

public type TestFunc func void();

public type Test struct {
    const char* name;
    TestFunc run;
}

const char* ansi_blue =   "\033[0;34m";
const char* ansi_normal = "\033[0m";
const char* ansi_red =    "\033[0;31m";
const char* ansi_yellow = "\033[0;33m";

char[4096] error_buffer;
char* error_msg;
jmp_buf c2test_err;

uint32 num_ok;
uint32 num_failed;
uint32 cur_test;

public func void runtests(const Test* tests, uint32 num_tests)
{
    num_ok = 0;
    num_failed = 0;
    for (cur_test = 0; cur_test < num_tests; cur_test++) {
        uint32 i = cur_test;
        printf("TEST %u/%u %s ", i+1, num_tests, tests[i].name);
        error_buffer[0] = 0;
        error_msg = error_buffer;
        int32 result = setjmp(&c2test_err);
        if (result == 0) {
            tests[i].run();
            printf("[OK]\n");
            num_ok++;
        } else {
            printf("%s[FAIL]%s\n", ansi_red, ansi_normal);
            num_failed++;
        }
        if (error_msg != error_buffer) {
            printf("%s", error_buffer);
        }
    }
    const char* color = ansi_normal;
    if (num_failed) color = ansi_red;
    printf("%sRESULTS: %d tests (%d ok, %d failed)%s\n", color,
        num_tests, num_ok, num_failed, ansi_normal);
}

func void color_print(const char* color, const char* title, const char* filename, uint32 line, const char* msg) {
    uint32 len;
    if (filename) {
        len = cast<uint32>(sprintf(error_msg, "  %s%s: %s:%d %s%s\n", color, title, filename, line, msg, ansi_normal));
    } else {
        len = cast<uint32>(sprintf(error_msg, "  %s%s: %s%s\n", color, title, msg, ansi_normal));
    }
    error_msg += len;
}

public func void fail(const char* filename, uint32 line, char* msg = nil)
{
    if (msg == nil) msg = "failed";
    color_print(ansi_yellow, "ERR", filename, line, msg);
    longjmp(c2test_err, 1);
}

public func void assert_equal(int64 exp, int64 real, const char* caller, uint32 line)
{
    if (exp != real) {
        char[64] msg;
        sprintf(msg, "expected %ld, got %ld", exp, real);
        color_print(ansi_yellow, "ERR", caller, line, msg);
    }
}

public func void log(const char* msg)
{
    color_print(ansi_blue, "LOG", nil, 0, msg);
}

