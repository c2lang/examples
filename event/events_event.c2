module events;

public type EventFunc func void(i32 fd, void* arg, u16 flags);

public type Event struct {
    i32 fd;
    Event* next;
    Base* base;
    EventFunc handler;
    void* handler_arg;
}

public const u8 READ  = 0x02;
public const u8 WRITE = 0x04;

public func void Event.assign(Event* ev, Base* base, i32 fd, u16 flags, EventFunc fn, void* arg)
{
    ev.fd = fd;
    ev.next = nil;
    ev.base = base;
    ev.handler = fn;
    ev.handler_arg = arg;
}

public func void Event.add(Event* ev)
{
    Base* base = ev.base;
    if (base.event_tail) base.event_tail.next = ev;
    else base.event_head = ev;
    base.event_tail = ev;

    base.updateEvents();
}

public func void Event.del(Event* ev)
{
    Base* base = ev.base;

    bool wasActive = false;
    if (base.event_head == ev) {
        // is first event
        base.event_head = ev.next;
        if (base.event_head == nil) base.event_tail = nil;
        wasActive = true;
    } else {
        Event* cur = base.event_head;
        while (cur) {
            if (cur.next == ev) {
                cur.next = ev.next;
                if (base.event_tail == ev) base.event_tail = cur;
                wasActive = true;
                break;
            }
            cur = cur.next;
        }
    }
    if (wasActive) {
        ev.next = nil;
        base.updateEvents();
    }
}

