module example_socket;

import stdio local;
import stdlib local;
import unistd local;
import string local;
import sys_socket local;
import events;
import logger;

const u8 LF = 0x0A;
const u8 CR = 0x0D;

func void fatal(const char* msg) {
    printf("%s\n", msg);
    exit(EXIT_FAILURE);
}

func void stripNewline(char* buffer, i64 len)
{
    if (buffer[len-1] == LF) {
        buffer[len-1] = 0;
        len--;
    }
    if (buffer[len-1] == CR) {
        buffer[len-1] = 0;
        len--;
    }
}

type Connection struct {
    i32 fd;
    Connection* next;
    logger.Log* log;
    events.Event event;
    Socket* socket;
}

func Connection* Connection.create(i32 fd, Socket* s, logger.Log* log) {
    Connection* conn = calloc(1, sizeof(Connection));
    conn.fd = fd;
    conn.log = log;
    conn.socket = s;
    conn.event.assign(s.base, fd, events.READ, connection_on_data, conn);
    conn.event.add();

    const char* msg = "welcome\n";
    write(fd, msg, strlen(msg));
    return conn;
}

func void Connection.onData(Connection* conn)
{
    char[128] buffer;

    i64 numread = read(conn.fd, buffer, 128);
    if (numread == 0) {
        conn.log.warn("client disconnected");
        conn.destroy();
        return;
    }
    buffer[numread] = 0;
    stripNewline(buffer, numread);

    conn.log.info("[%d] read [%s]", conn.fd, buffer);
    if (strcmp(buffer, "quit") == 0) {
        conn.log.warn("client requested disconnect");
        conn.destroy();
    }
}

func void Connection.destroy(Connection* conn)
{
    conn.log.debug("destroy conn %d", conn.fd);
    conn.socket.removeConnection(conn);
    conn.event.del();
    close(conn.fd);
    free(conn);
}

func void connection_on_data(i32 fd, void* arg, u16 flags)
{
    Connection* conn = arg;
    conn.onData();
}


public type Socket struct {
    i32 fd;
    events.Base* base;
    events.Event event;
    logger.Log log;
    Connection* conns;
} @(opaque)

public func Socket* Socket.create(events.Base* base, logger.Base* logbase, const char* name, u16 port)
{
    Socket* s = calloc(1, sizeof(Socket));
    s.base = base;
    s.log.init(logbase, name);
    s.log.setLevel(logger.Level.Debug);

    s.fd = socket(AF_INET, __socket_type.SOCK_STREAM | __socket_type.SOCK_CLOEXEC, IPPROTO_TCP);
    if (s.fd == -1) {
        fatal("opening TCP socket");
    }

	Sockaddr_in my_addr;
	my_addr.sin_family = AF_INET;
    my_addr.sin_port = htons(port);
    my_addr.sin_addr.s_addr = INADDR_ANY;
    memset(&my_addr.sin_zero, 0, 8);

    i32 reuse = 1;
    if (setsockopt(s.fd, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse)) != 0) {
        fatal("setsockopt(SO_REUSEADDR)");
    }

    if (bind(s.fd, &my_addr, sizeof(Sockaddr)) != 0) fatal("bind() failed");

    if (listen(s.fd, 1) != 0) fatal("listen() failed");

    s.log.debug("listening to port %d", port);
    s.event.assign(base, s.fd, events.READ, socket_on_connection, s);
    s.event.add();
    return s;
}

public func void Socket.destroy(Socket* s)
{
    s.log.debug("closing socket");
    while (s.conns) {
        s.conns.destroy(); // self-removes itself from list
    }
    s.event.del();
    close(s.fd);
    free(s);
}

func void Socket.addConnection(Socket* s, Connection* c)
{
    s.log.debug("add conn %d", c.fd);
    if (s.conns == nil) {
        s.conns = c;
    } else {
        Connection* cur = s.conns;
        while (cur.next) cur = cur.next;
        cur.next = c;
    }
}

func void Socket.removeConnection(Socket* s, Connection* c)
{
    s.log.debug("remove conn %d", c.fd);
    if (s.conns == c) {
        s.conns = c.next;
    } else {
        Connection* cur = s.conns;
        while (cur.next != c) cur = cur.next;
        cur.next = c.next;
    }
    c.next = nil;
}

func void Socket.onConnection(Socket* s)
{
    u32 sin_size = sizeof(Sockaddr_in);
    Sockaddr_in remote;
    i32 new_fd = accept4(s.fd, &remote, &sin_size, __socket_type.SOCK_CLOEXEC);
    if (new_fd == -1) fatal("accept4");

    char* src_ipnr = inet_ntoa(remote.sin_addr);
    s.log.info("new connection from %s", src_ipnr);
    s.addConnection(Connection.create(new_fd, s, &s.log));
}

func void socket_on_connection(i32 fd, void* arg, u16 flags)
{
    Socket* s = arg;
    s.onConnection();
}

