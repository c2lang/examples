module test;

import pthread;
import stdio as io;
import unistd local;

bool stop = false;

fn void* startThread1(void*) {
    io.printf("started thread1\n");
    while (!stop) {
        sleep(1);
        io.printf("running1\n");
    }
    io.printf("quit thread1\n");
    return nil;
}

fn void* startThread2(void*) {
    io.printf("started thread2\n");
    while (!stop) {
        sleep(1);
        io.printf("running2\n");
    }
    io.printf("quit thread2\n");
    return nil;
}

public fn i32 main() {
    pthread.Pthread[2] threads;
    i32 rc = pthread.create(&threads[0], nil, startThread1, nil);
    if (rc != 0) {
        io.perror("pthread_create");
        return -1;
    }
    i32 rc2 = pthread.create(&threads[1], nil, startThread2, nil);
    if (rc2 != 0) {
        io.perror("pthread_create");
        return -1;
    }

    sleep(4);
    io.printf("stopping threads\n");
    stop = true;
    i32 res;
    res = pthread.join(threads[0], nil);
    res = pthread.join(threads[1], nil);
    io.printf("done\n");
    return 0;
}

