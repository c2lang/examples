module test;

import unistd local;
import stdio local;
import string local;
import libc_fcntl local;
import stdlib local;

import file_utils;
import utils;

const char NEWLINE = 0x0A;

/*
    strip all lines startin with '//'
    TODO also handle multi-line comments
*/
func void strip_comments(const char* input, utils.StringBuffer* out)
{
    const char* cp = input;
    const char* linestart = cp;
    u32 lines = 0;
    u32 outlines = 0;
    bool white = true;
    bool skip = false;
    while (*cp != 0) {
        if (*cp == NEWLINE) {
            cp++;
            if (!skip) {
                out.add2(linestart, cast<u32>(cp - linestart));
                outlines++;
            }
            linestart = cp;
            white = true;
            skip = false;
            lines++;
        } else {
            switch (*cp) {
            case ' ': fallthrough;
            case '\t':
                break;
            case '/':
                if (cp[1] == '/') {
                    // read until newline
                    while (*cp != NEWLINE && *cp != 0) cp++;
#if 0
                    char[256] line;
                    u32 len = cast<u32>(cp - linestart);
                    memcpy(line, linestart, len);
                    line[len] =  0;
                    printf("%d %s", white, line);
#endif
                    if (white) skip = true;
                    continue;
                }
                fallthrough;
            default:
                white = false;
                break;
            }
            cp++;
        }
    }
    printf("lines %u -> %u (stripped %d lines)\n", lines, outlines, lines - outlines);
}

public func i32 main(i32 argc, char*[] argv) {
    if (argc != 2) {
        printf("Usage: parser [c-file]\n");
        return 0;
    }
    file_utils.Reader infile;
    infile.open(argv[1]);

    //printf("%s", file.data());
    if (infile.isEmpty()) {
        printf("file %s is empty\n", argv[1]);
        return 0;
    }

    utils.StringBuffer* buffer = utils.StringBuffer.create(infile.size);

    strip_comments(cast<const i8*>(infile.data()), buffer);
    infile.close();

    file_utils.Writer outfile;
    const char* outname = "out.c";
    printf("written %s\n", outname);
    if (!outfile.write(outname, cast<const u8*>(buffer.data()), buffer.size())) {
        printf("error writing file: %s\n", outfile.getError());
    }

    buffer.destroy();

    return 0;
}

