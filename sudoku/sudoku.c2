module sukodu;

import stdio local;
import color;
import string local;

/*
    2 extra algorithms:
    - if 2 fields have options like: 1,2,4 and 1,2 (and 1/2 only appear there), then eliminate 4
    - a col/row must have all numbers, so we sometimes know that a certain number must be in that square col/row
*/

type Field struct {
    u8 value;       // !0 if known
    u16 options;    // bitbise if still valid TODO 0 is option, 1 is crossed out
}

type Board struct {
    Field[9*9] fields;
    bool inSetup;
    u32 todo;
}

const i8[] SquareOffsets = {
       1,   2,   9,  10,  11, 18, 19, 20, // top left
      -1,   1,   8,   9,  10, 17, 18, 19, // top middle
      -2,  -1,   7,   8,   9, 16, 17, 18, // top right
      -9,  -8,  -7,   1,   2,  9, 10, 11, // middle left
     -10,  -9,  -8,  -1,   1,  8,  9, 10, // middle
     -11, -10,  -9,  -2,  -1,  7,  8,  9, // middle right
     -18, -17, -16,  -9,  -8, -7,  1,  2, // bottom left
     -19, -18, -17, -10,  -9, -8, -1,  1, // bottom middle
     -20, -19, -18, -11, -10, -9, -2, -1, // bottom right
}

const i8[] RowOffsets = { // from top row element in Square
    27, 36, 45, 54, 63, 70,      // top square row
    -27, -18, -9, 27, 36, 45,    // middle square row
    -54, -45, -36, -27, -18, -9, // bottom square row
}

const i8[] ColOffsets = { // from left column element in Square
    3, 4, 5, 6, 7, 8,       // left square column
    -3, -2, -1, 3, 4, 5,    // middle square column
    -6, -5, -4, -3, -2, -1, // right square column
}

func void Board.set(Board* board, u8 x, u8 y, u8 value) {
    if (!board.inSetup) printf("set %u,%u -> %u\n", y, x, value);
    u32 idx = 9*y + x;
    board.fields[idx].value = value;
    board.fields[idx].options = 0;
    board.todo--;

    u32 clear = ~(1<<value);
    // clear row
    for (u32 i=0; i<9; ++i) {
        if (i==x) continue;
        board.fields[9*y + i].options &= clear;
    }
    // clear column
    for (u32 i=0; i<9; ++i) {
        if (i==y) continue;
        board.fields[9*i + x].options &= clear;
    }
    // clear square
    i32 offs = x%3 + (y%3)*3;
    for (u32 i=0; i<8; i++) {
        board.fields[idx + SquareOffsets[offs*8 + i]].options &= clear;
    }
    if (!board.inSetup) board.print(false, x, y);
}

func void Board.init(Board* board) {
    memset(board, 0, sizeof(Board));
    for (u32 y=0; y<9; y++) {
        for (u32 x=0; x<9; x++) {
            u32 idx = 9*y + x;
            board.fields[idx].options = 0x3FE;  // set bits 1-9
        }
    }
    board.todo = 9*9;
}

func void Board.print(const Board* board, bool showOptions, u8 xx, u8 yy) {
    char[2048] buffer;
    memset(buffer, 0, sizeof(buffer));
    char* cp = buffer;
    cp += sprintf(cp, "-------------------------\n");
    for (u32 y=0; y<9; y++) {
        *cp++ = '|';
        for (u32 x=0; x<9; x++) {
            u32 idx = 9*y + x;
            const Field* f = &board.fields[idx];
            if (f.value) {
                const char* col = color.Green;
                if (x == xx && y == yy) col = color.Byellow;
                cp += sprintf(cp, " %s%u%s", col, f.value, color.Normal);
            } else {
                cp += sprintf(cp, "  ");
            }
            if (x % 3 == 2) {
                *cp++ = ' ';
                *cp++ = '|';
            }
        }
        *cp++ = '\n';
        if (y % 3 == 2) cp += sprintf(cp, "-------------------------\n");
    }
    *cp = 0;
    puts(buffer);
    if (showOptions && board.todo != 0) board.printOptions();
}

func void Board.printOptions(const Board* board) {
    u32 height = 9 * 4 + 1;
    u32 width =  9 * 8 + 2;
    char[width * height + 1] buffer;
    memset(buffer, ' ', sizeof(buffer));
    buffer[width * height] = 0;
    // horizontal + vertical lines
    for (u32 y=0; y<height; y++) {
        char* line = &buffer[y*width];
        if (y % 12 == 0) for (u32 x=0; x<width-1; x++) line[x] = '=';
        else if (y % 4 == 0) for (u32 x=0; x<width-1; x++) line[x] = '-';
        else {
            for (u32 x=0; x<width-1; x++) {
                if (x % 8 == 0) line[x] = '|';
            }
        }
        line[width-1] = '\n';
    }

    // option values
    for (u8 y=0; y<9; y++) {
        for (u8 x=0; x<9; x++) {
            const Field* f = &board.fields[y*9 + x];
            u32 offset = (1 + 4 * y) * width + (1 + 8 * x);
            u8* square = &buffer[offset];
            for (u8 o=1; o<10; o++) {
                if (f.options & (1<<o)) {
                    u32 h = (o-1) % 3;
                    u32 w = (o-1) / 3;
                    square[(width * w) + (2 * h) + 1] = o + '0';
                }
            }
        }
    }

    puts(buffer);
}

func void Board.setup(Board* board, Setup* setup, u32 size) {
    board.init();
    board.inSetup = true;
    for (u32 i=0; i<size; i++) {
        Setup* s = &setup[i];
        board.set(s.x, s.y, s.value);
    }
    board.inSetup = false;
    printf("setup (%u given)\n", size);
    board.print(false, 10, 0);
}

func void Board.checkFields(Board* board) {
    for (u8 y=0; y<9; y++) {
        for (u8 x=0; x<9; x++) {
            Field* f = &board.fields[y*9 + x];
            u16 options = f.options;
            switch (options) {
            case 2:
                board.set(x, y, 1);
                break;
            case 4:
                board.set(x, y, 2);
                break;
            case 8:
                board.set(x, y, 3);
                break;
            case 16:
                board.set(x, y, 4);
                break;
            case 32:
                board.set(x, y, 5);
                break;
            case 64:
                board.set(x, y, 6);
                break;
            case 128:
                board.set(x, y, 7);
                break;
            case 256:
                board.set(x, y, 8);
                break;
            case 512:
                board.set(x, y, 9);
                break;
            default:
                break;
            }
        }
    }
}

func void Board.checkRow(Board* board, u8 row) {
    u8[10] count = { 0 }
    u8[10] pos = { 0 }
    for (u8 x=0; x<9; x++) {
        u32 idx = 9*row + x;
        const Field* f = &board.fields[idx];
        for (u32 o=1; o<10; o++) {
            if ((f.options >> o) & 1) {
                count[o]++;
                pos[o] = x;
            }
        }
    }
    for (u8 o=1; o<10; o++) {
        if (count[o] == 1) {
            board.set(pos[o], row, o);
        }
    }
}

func void Board.checkColumn(Board* board, u8 col) {
    u8[10] count = { 0 }
    u8[10] pos = { 0 }
    for (u8 y=0; y<9; y++) {
        u32 idx = 9*y + col;
        const Field* f = &board.fields[idx];
        for (u32 o=1; o<10; o++) {
            if ((f.options >> o) & 1) {
                count[o]++;
                pos[o] = y;
            }
        }
    }
    for (u8 o=1; o<10; o++) {
        if (count[o] == 1) board.set(col, pos[o], o);
    }
}

func bool Board.checkSquares(Board* board, bool extra) {
    u32 cleared = 0;
    for (u8 y=0; y<3; y++) {
        for (u8 x=0; x<3; x++) {
            // check square
            u8 topleft = (y*9 + x) *3;
            u8[10] count = { 0 }
            u8[10] pos = { 0 }
            u8[10] localRows = { 0 }
            u8[10] localCols = { 0 }
            const Field* f = &board.fields[topleft + 0];
            for (u32 o=1; o<10; o++) {
                // TODO refactor with block below
                if ((f.options >> o) & 1) {
                    count[o]++;
                    pos[o] = topleft;
                    // NOTE: lcol,lrow should be 0,0
                    u8 lcol = (topleft % 9) % 3;    // TODO simplify
                    u8 lrow = (topleft / 9) % 3;    // TODO simplify
                    localRows[o] |= (1 << lrow);
                    localCols[o] |= (1 << lcol);
                }
            }
            for (u8 i=0; i<8; i++) {
                // TODO use i+1 as index into count/pos
                u8 off = cast<u8>(topleft + SquareOffsets[i]);
                f = &board.fields[off];
                for (u32 o=1; o<10; o++) {
                    if ((f.options >> o) & 1) {
                        count[o]++;
                        pos[o] = off;

                        u8 lcol = (off % 9) % 3;    // TODO simplify
                        u8 lrow = (off / 9) % 3;    // TODO simplify
                        localRows[o] |= (1 << lrow);
                        localCols[o] |= (1 << lcol);
                    }
                }
            }
            for (u8 o=1; o<10; o++) {
                if (count[o] == 1) {
                    board.set(pos[o] % 9, pos[o] / 9, o);
                    //printf("  FOUND %u   count %u  pos %u -> %u,%u\n", o, count[o], pos[o], pos[o] % 9, pos[o] / 9);
                    continue;
                }
                if (extra) {
                    // NOTE: HAS ISSUES
                    u32 clear = ~(1<<o);
                    if (localRows[o] == 1 || localRows[o] == 2 || localRows[o] == 4) {
                        printf("  FOUND  %u,%u  num %u  ROW %u\n", y, x, o, localRows[o] >> 1);
                        u8 leftCol = topleft + (localRows[o] >> 1) * 9; // NOTE: rshift 1 does 1-> 0, 2 -> 1, 4 -> 2
                        // clear row outside current square
                        for (i8 i=0; i<6; i++) {
                            i8 idx = leftCol + ColOffsets[x*6 + i];
                            u16 before = board.fields[idx].options;
                            board.fields[idx].options &= clear;
                            u16 after = board.fields[idx].options;
                            if (before != after) cleared++;
                        }
                    }
                    if (localCols[o] == 1 || localCols[o] == 2 || localCols[o] == 4) {
                        printf("  FOUND  %u,%u  num %u  COL %u\n", y, x, o, localCols[o] >> 1);
                        u8 topRow = topleft + (localCols[o] >> 1); // NOTE: rshift 1 does 1 -> 0, 2 -> 1, 4 -> 2
                        // clear column outside current square
                        for (i8 i=0; i<6; i++) {
                            i8 idx = topRow + RowOffsets[y*6 + i];
                            u16 before = board.fields[idx].options;
                            board.fields[idx].options &= clear;
                            u16 after = board.fields[idx].options;
                            if (before != after) cleared++;
                        }
                    }
                }
            }
        }
    }
    return (cleared != 0);
}

func void Board.solve(Board* board) {
    printf("solving Sudoku\n");
    u32 loops = 0;
    while (1) {
        u32 before = board.todo;

        printf("checking rows (%u todo)\n", board.todo);
        for (u8 i=0; i<9; i++) board.checkRow(i);

        printf("checking columns (%u todo)\n", board.todo);
        for (u8 i=0; i<9; i++) board.checkColumn(i);

        printf("checking fields (%u todo)\n", board.todo);
        board.checkFields();

        printf("checking squares (%u todo)\n", board.todo);
        bool cleared = board.checkSquares(false);

        loops++;
        if (board.todo == 0) break;
        if (!cleared && board.todo == before) break;
    }
    printf("%u loops\n", loops);
}

type Setup struct {
    u8 y;
    u8 x;
    u8 value;
} @(packed)

type Puzzle struct {
     const char* name;
    Setup* setup;
    u32 setup_count;
}

func const Puzzle* find(const Puzzle* puzzles, u32 count, const char* name) {
    for (u32 i=0; i<count; i++) {
        if (strcmp(puzzles[i].name, name) == 0) {
            return &puzzles[i];
        }
    }
    return nil;
}

public func i32 main(i32 argc, char** argv) {
    // NOTE: cannot be global due to issue with functions not being CTC yet
    Puzzle[] puzzles = {
        { "h4", Hard_pg4,  elemsof(Hard_pg4) },
        { "h5", Hard_pg5,  elemsof(Hard_pg5) },
        { "u3", Ultra_pg3, elemsof(Ultra_pg3) },
        { "u5", Ultra_pg5, elemsof(Ultra_pg5) },
    }

    if (argc != 2) {
        printf("usage: %s [puzzle]\n", argv[0]);
        for (u32 i=0; i<elemsof(puzzles); i++) {
            printf("  %s\n", puzzles[i].name);
        }
        return 0;
    }

    const Puzzle* p = find(puzzles, elemsof(puzzles), argv[1]);
    if (!p) {
        printf("Unknown puzzle\n");
        return -1;
    }

    Board board;
    board.setup(p.setup, p.setup_count);
    board.solve();
    board.print(true, 10, 0);

    return 0;
}

