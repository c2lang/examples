module mod_main;

import stdio local;
import stdlib local;
import string local;
import sys_stat local;
import sys_time;
import libc_dirent local;
import c_errno local;
import unistd;

fn void print_indent(u32 indent) {
    for (u32 i=0; i<indent; i++) {
        printf("  ");
    }
}

fn void handle_file(const char* path, u32 indent) {
    print_indent(indent);
    printf("%s\n", path);
}

fn void handle_dir(const char* path, u32 indent) {
    print_indent(indent);
    printf("%s/\n", path);
    DIR* dir = opendir(path);
    if (dir == nil) {
        printf("cannot open dir '%s': %s\n", path, strerror(*errno2()));
        return;
    }
    Dirent* dir2 = readdir(dir);
    char[512] temp;
    while (dir2 != nil) {
        // FIXME: need string.makepath
        snprintf(temp, sizeof(temp), "%s/%s", path, dir2.d_name);
        switch (dir2.d_type) {
        case DT_REG:
            handle_file(temp, indent+1);
            break;
        case DT_DIR:
            if (strcmp(dir2.d_name, ".") != 0 && strcmp(dir2.d_name, "..") != 0) {
                handle_dir(temp, indent+1);
            }
            break;
        default:
            break;
        }
        dir2 = readdir(dir);
    }
    closedir(dir);
}


public fn i32 main() {
    handle_dir(".", 0);

    return 0;
}


