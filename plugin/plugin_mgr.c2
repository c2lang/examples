module plugin_mgr;

import dlfcn local;
import stdio local;
import c_errno local;
import string local;
import other;

type LoadFn func void(i32 arg);

public func i32 main(i32 argc, char** argv) {
    if (argc != 2) {
        printf("Usage: %s [filename]\n", argv[0]);
        return 0;
    }

    printf("other.test1 = %p\n", other.test1);
    other.test1();

    const char* filename = argv[1];
    void* handle = dlopen(filename, RTLD_NOW | RTLD_GLOBAL);
    if (!handle) {
        fprintf(stderr, "error opening %s: %s\n", filename, strerror(*errno2()));
        return -1;
    }

    // TODO must symbol be in standard module as well? since otherwise we dont know name?
    void* symbol = dlsym(handle, "plugin_main_load");
    if (!symbol) {
        fprintf(stderr, "invalid plugin\n");
        dlclose(handle);
        return -1;
    }

    // TODO allow casting of u64/void* to functions (and back)
    u64 temp = cast<u64>(symbol);
    LoadFn load = cast<LoadFn>(temp);


    load(123);

    dlclose(handle);

    return 0;
}

