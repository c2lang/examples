module test;

import stdio local;
import stdlib local;
import unistd local;
import string local;
import sys_socket local;

func void fatal(const char* msg) {
    printf("%s\n", msg);
    exit(EXIT_FAILURE);
}

func i32 open_socket(u16 port)
{
    i32 fd = socket(AF_INET, SOCK_STREAM | SOCK_CLOEXEC, IPPROTO_TCP);
    if (fd == -1) {
        fatal("opening TCP socket");
    }

	sockaddr_in my_addr;
	my_addr.sin_family = AF_INET;
    my_addr.sin_port = htons(port);
    my_addr.sin_addr.s_addr = INADDR_ANY;
    memset(&my_addr.sin_zero, 0, 8);

    i32 reuse = 1;
    if (setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse)) != 0) {
        fatal("setsockopt(SO_REUSEADDR)");
    }

    if (bind(fd, &my_addr, sizeof(sockaddr)) != 0) fatal("bind() failed");

    if (listen(fd, 4) != 0) fatal("listen() failed");

    return fd;
}

func i32 wait_for_connection(i32 fd, char** src_ipnr)
{
    u32 sin_size = sizeof(sockaddr_in);
    sockaddr_in remote;
    i32 new_fd = accept4(fd, &remote, &sin_size, SOCK_CLOEXEC);
    if (new_fd == -1) fatal("accept4");

    *src_ipnr = inet_ntoa(remote.sin_addr);
    return new_fd;
}

public func i32 main() {
    // open socket
    u16 port = 8888;
    i32 fd = open_socket(port);
    printf("listering on port %d (press Ctrl-C to quit)\n", port);

    // wait until accept
    char* src_ipnr = nil;
    i32 conn_fd = wait_for_connection(fd, &src_ipnr);
    printf("connection from %s\n", src_ipnr);

    // read until disconnect
    while (1) {
        const u32 BufSize = 64;
        u8[BufSize] buffer;
        i64 numread = read(conn_fd, buffer, BufSize-1);
        if (numread == 0) {
            printf("client disconnected\n");
            break;
        }
        buffer[numread] = 0;
        if (buffer[numread-1] == '\n') buffer[numread-1] = 0;
        printf("read %lu bytes: %s\n", numread, buffer);
    }

    // close socket
    close(conn_fd);
    close(fd);

    return 0;
}

